@using Velstand.Constants
@using Velstand.Models
@inherits Umbraco.Web.Macros.PartialViewMacroPage
@{
    IPublishedContent current = CurrentPage;
    IPublishedContent holder = current.VBlogHolderTop();
}

<ul class="v-widget collection">
    <li class="collection-header"><h4><i class="material-icons">&#xE8EF;</i> @Umbraco.GetDictionaryValue("ContentMap")</h4></li>
    <li class="v-level-list">
        @Traverse(holder)
    </li>
</ul>

@* Helper method to travers through all descendants *@
@helper Traverse(IPublishedContent node)
{
    @* Select visible children *@
    var items = node.Children.Where(x => !x.DocumentTypeAlias.StartsWith(VelstandPrefix.PrivateItem)
                                                          && !x.DocumentTypeAlias.StartsWith(VelstandPrefix.Error));

    @* If any items are returned, render a list *@
    if (items.Any())
    {
        foreach (var item in items)
        {
            <ul class="v-level-@(item.Level) collapsible-level-list" data-collapsible="accordion">
                <li>
                    @if (item.DocumentTypeAlias.StartsWith(VelstandPrefix.Content))
                    {
                        <a href="@item.Url" title="@item.GetPropertyValue(" title")" class="v-level-item truncate col s12">
                            <i class="mdi-editor-insert-drive-file"></i>
                            @Umbraco.Field(item, "title", altText: item.Name)
                        </a>
                    }
                    else if (item.Children.Count() != 0)
                    {
                        <div class="collapsible-header">
                            <div class="truncate col s10">
                                <i class="mdi-file-folder-open"></i>
                                @Umbraco.Field(item, "title", altText: item.Name)
                            </div>
                            <a href="#" class="col s2"><i class="material-icons">&#xE31B;</i></a>
                        </div>
                    }
                    <div class="collapsible-body">
                        @Traverse(item)
                    </div>
                </li>
            </ul>
        }
    }
}